{"remainingRequest":"D:\\Go\\src\\alphacare\\ac_frontend\\apps\\admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Go\\src\\alphacare\\ac_frontend\\apps\\admin\\src\\components\\ProjectDetails.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"D:\\Go\\src\\alphacare\\ac_frontend\\apps\\admin\\src\\components\\ProjectDetails.vue","mtime":1603530830156},{"path":"D:\\Go\\src\\alphacare\\ac_frontend\\apps\\admin\\node_modules\\@vue\\cli-service\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Go\\src\\alphacare\\ac_frontend\\apps\\admin\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"D:\\Go\\src\\alphacare\\ac_frontend\\apps\\admin\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"D:\\Go\\src\\alphacare\\ac_frontend\\apps\\admin\\node_modules\\sass-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Go\\src\\alphacare\\ac_frontend\\apps\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Go\\src\\alphacare\\ac_frontend\\apps\\admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCi5pbnB1dC1idXR0b24td3JhcCB7DQogIGRpc3BsYXk6IGZsZXg7DQp9DQo="},{"version":3,"sources":["ProjectDetails.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuaA;AACA;AACA","file":"ProjectDetails.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n    <v-card color=\"blue-grey darken-1\" dark flat class=\"mx-auto\">\r\n      <v-card-title class=\"headline grey lighten-2\">\r\n        <v-icon v-if=\"projectCopy.createdAt > 0\" left color=\"black\">mdi-cog-outline</v-icon>\r\n        <h3 v-if=\"projectCopy.createdAt > 0\">Settings</h3>\r\n        <h3 v-else>New</h3>\r\n      </v-card-title>\r\n        <v-form ref=\"DetailsForm\" v-model=\"isValid\" lazy-validation>\r\n            <v-layout wrap>\r\n                <v-flex xs12>\r\n                    <v-progress-linear :active=\"isUpdating\" class=\"ma-0\" color=\"green lighten-3\" height=\"4\" indeterminate></v-progress-linear>\r\n                </v-flex>\r\n            </v-layout>\r\n            <v-container>\r\n                <v-layout wrap>\r\n                    <v-flex xs12 md12>\r\n                      <br>\r\n                      <v-text-field v-model=\"projectCopy.name\" :rules=\"projectNameRules\" :disabled=\"isUpdating\" color=\"blue-grey lighten-2\" label=\"Project Name\" dense></v-text-field>\r\n                    </v-flex>\r\n                    <v-flex xs12 md12>\r\n                        <v-textarea v-model=\"projectCopy.intro\" :disabled=\"isUpdating\" color=\"blue-grey lighten-2\" dense>\r\n                            <template v-slot:label>\r\n                                <div>\r\n                                    Intro <small>(optional)</small>\r\n                                </div>\r\n                            </template>\r\n                        </v-textarea>\r\n                    </v-flex>\r\n                  <v-flex xs12 md12>\r\n                    <v-text-field v-model=\"projectCopy.author\" :disabled=\"isUpdating\" color=\"blue-grey lighten-2\" label=\"Author\" dense></v-text-field>\r\n                  </v-flex>\r\n                </v-layout>\r\n            </v-container>\r\n            <v-container>\r\n                <v-layout wrap>\r\n                    <v-flex xs12 md12>\r\n                        <v-text-field v-model=\"projectCopy.outgoingEmail\" :rules=\"loginEmailRules\" :disabled=\"isUpdating\" color=\"blue-grey lighten-2\" label=\"Outgoing Email\" dense></v-text-field>\r\n                    </v-flex>\r\n                    <v-flex xs12 md12>\r\n                      <div class=\"input-button-wrap\">\r\n                        <v-text-field v-model=\"projectCopy.avatarUrl\" :disabled=\"isUpdating\" color=\"blue-grey lighten-2\" dense>\r\n                            <template v-slot:label>\r\n                                <div>\r\n                                    Avatar URL <small>(optional)</small>\r\n                                </div>\r\n                            </template>\r\n                          <template slot=\"append\">\r\n                            <v-btn tile @click=\"uploadFile('avatar')\" color=\"blue-grey darken-3\" class=\"pa-2\">\r\n                              <v-icon left>mdi-cloud-outline</v-icon>\r\n                              Upload\r\n                            </v-btn>\r\n                          </template>\r\n                        </v-text-field>\r\n                      </div>\r\n                    </v-flex>\r\n                    <v-flex xs12 md12>\r\n                      <div class=\"input-button-wrap\">\r\n                        <v-text-field v-model=\"projectCopy.backgroundImageUrl\" :disabled=\"isUpdating\" color=\"blue-grey lighten-2\" dense>\r\n                            <template v-slot:label>\r\n                                <div>\r\n                                    Background URL <small>(optional)</small>\r\n                                </div>\r\n                            </template>\r\n                            <template slot=\"append\">\r\n                              <v-btn tile @click=\"uploadFile('background')\" color=\"blue-grey darken-3\" class=\"pa-2\">\r\n                                <v-icon left>mdi-cloud-outline</v-icon>\r\n                                Upload\r\n                              </v-btn>\r\n                            </template>\r\n                        </v-text-field>\r\n                      </div>\r\n                    </v-flex>\r\n                </v-layout>\r\n            </v-container>\r\n            <v-container>\r\n                <v-row align=\"center\">\r\n                    <v-col class=\"d-flex\" cols=\"12\" sm=\"6\">\r\n                        <v-select dense outlined v-model=\"projectCopy.interval\" :items=\"intervals\" item-value=\"interval\" item-text=\"label\" label=\"Frequency\"></v-select>\r\n                    </v-col>\r\n                  <v-col class=\"d-flex\" cols=\"12\" sm=\"6\">\r\n                    <v-select\r\n                        v-model=\"projectCopy.subscriptionType\"\r\n                        placeholder=\"Default\"\r\n                        :hint=\"getSubscriptionTypeHint()\"\r\n                        :items=\"subscriptionTypes\"\r\n                        item-text=\"option\"\r\n                        item-value=\"value\"\r\n                        label=\"Subscription Type\"\r\n                        persistent-hint\r\n                        outlined\r\n                        dense\r\n                    ></v-select>\r\n                  </v-col>\r\n                </v-row>\r\n            </v-container>\r\n            <v-container v-if=\"projectCopy.createdAt\">\r\n                <v-layout wrap>\r\n                    <v-btn block tile :disabled=\"isUpdating\" :loading=\"isUpdating\" color=\"red\" depressed @click=\"dialog=true\">\r\n                        <v-icon left>mdi-trash-can-outline</v-icon>\r\n                        Delete\r\n                    </v-btn>\r\n                    <v-row justify=\"center\">\r\n                        <v-dialog v-model=\"dialog\" max-width=\"250\">\r\n                            <confirm-dialog v-bind:title=\"`Are you sure?`\" :body=\"`The action is not reversible. All of your articles and subscribers will be deleted.`\" @yes=\"deleteConfirmed\" @no=\"dialog=false\"></confirm-dialog>\r\n                        </v-dialog>\r\n                    </v-row>\r\n                </v-layout>\r\n            </v-container>\r\n            <v-container>\r\n                <v-row justify=\"center\">\r\n                    <v-dialog v-model=\"sendVerificationDialog\" max-width=\"650\">\r\n                        <confirm-dialog v-bind:title=\"compileVerificationDialog.title\" :body=\"compileVerificationDialog.body\" :simpleConfirm=\"true\" @no=\"sendVerificationDialog=false\"></confirm-dialog>\r\n                    </v-dialog>\r\n                </v-row>\r\n            </v-container>\r\n            <v-card-actions>\r\n                <v-switch v-if=\"projectCopy.createdAt > 0\" v-model=\"projectState\" :disabled=\"isUpdating\" class=\"mt-0\" color=\"green lighten-2\" hide-details flat :label=\"`${projectState ? 'Online' : 'Offline'}`\"></v-switch>\r\n                <v-spacer></v-spacer>\r\n                <v-btn tile v-if=\"projectCopy.createdAt > 0\" :disabled=\"isUpdating||!isValid\" :loading=\"isUpdating\" color=\"primary\" @click=\"updateProject()\">\r\n                    <v-icon left>mdi-update</v-icon>\r\n                    Save\r\n                </v-btn>\r\n                <v-btn v-else tile :disabled=\"isUpdating||!isValid\" :loading=\"isUpdating\" color=\"primary\" @click=\"createProject()\">\r\n                    <v-icon left>mdi-update</v-icon>\r\n                    Create\r\n                </v-btn>\r\n            </v-card-actions>\r\n        </v-form>\r\n        <v-container>\r\n            <v-dialog v-model=\"showGallery\" width=\"500px\">\r\n              <v-card>\r\n                <file-selector @select-file=\"onSelectImage\"></file-selector>\r\n              </v-card>\r\n            </v-dialog>\r\n        </v-container>\r\n    </v-card>\r\n</template>\r\n\r\n<script>\r\n    import axios from \"axios\";\r\n    import {default as API_ENDPOINTS} from \"../api\";\r\n    import ConfirmDialog from \"./ConfirmDialog\";\r\n    import FileSelector from './Gallery'\r\n\r\n    export default {\r\n        components: {ConfirmDialog, FileSelector},\r\n        data() {\r\n            return {\r\n                projectCopy: {},\r\n                projectState: '',\r\n                isUpdating: false,\r\n                dialog: false,\r\n                sendVerificationDialog: false,\r\n                loginEmailRules: [\r\n                    v => !!v || \"Required\",\r\n                    v => /.+@.+\\..+/.test(v) || \"E-mail must be valid\"\r\n                ],\r\n                projectNameRules: [\r\n                    v => !!v || \"Required\",\r\n                ],\r\n                isValid: false,\r\n                intervals: [\r\n                    {\r\n                        interval: 1 * 24 * 60 * 60 * 1000,\r\n                        label: \"1 day\"\r\n                    },\r\n                    {\r\n                        interval: 2 * 24 * 60 * 60 * 1000,\r\n                        label: \"2 days\"\r\n                    },\r\n                    {\r\n                        interval: 3 * 24 * 60 * 60 * 1000,\r\n                        label: \"3 days\"\r\n                    },\r\n                    {\r\n                        interval: 4 * 24 * 60 * 60 * 1000,\r\n                        label: \"4 days\"\r\n                    },\r\n                    {\r\n                        interval: 5 * 24 * 60 * 60 * 1000,\r\n                        label: \"5 days\"\r\n                    },\r\n                    {\r\n                        interval: 6 * 24 * 60 * 60 * 1000,\r\n                        label: \"6 days\"\r\n                    },\r\n                    {\r\n                        interval: 7 * 24 * 60 * 60 * 1000,\r\n                        label: \"1 week\"\r\n                    },\r\n                    {\r\n                        interval: 14 * 24 * 60 * 60 * 1000,\r\n                        label: \"2 weeks\"\r\n                    },\r\n                    {\r\n                        interval: 21 * 24 * 60 * 60 * 1000,\r\n                        label: \"3 weeks\"\r\n                    },\r\n                    {\r\n                        interval: 30 * 24 * 60 * 60 * 1000,\r\n                        label: \"1 month\"\r\n                    },\r\n                    {\r\n                        interval: 60 * 24 * 60 * 60 * 1000,\r\n                        label: \"2 months\"\r\n                    },\r\n                ],\r\n                showGallery: false,\r\n                isEditAvatarUrl: false,\r\n                isEditBackgroundUrl: false,\r\n                subscriptionTypes: [\r\n                  {option: \"Default\", value: 0},\r\n                  {option: \"Rolling\", value: 1}\r\n                ],\r\n            }\r\n        },\r\n        watch: {\r\n            projectState: function() {\r\n                if (this.projectState) {\r\n                    this.project.projectState = 3 // Live\r\n                } else {\r\n                    this.project.projectState = 2 // Created\r\n                }\r\n            },\r\n            resetFromValidation: function () {\r\n                this.$refs.DetailsForm.resetValidation()\r\n            }\r\n        },\r\n        props:[\r\n            'project',\r\n            'resetFromValidation'\r\n        ],\r\n        computed: {\r\n            compileVerificationDialog() {\r\n                const dialog = {\r\n                    title: \"The email address \" + this.projectCopy.outgoingEmail + \" is not yet verified\",\r\n                    body: \"A verification email has been sent to the email, please go to your mailbox and verify the address before proceeding.\"\r\n                }\r\n                return dialog\r\n            },\r\n            validateForm: function() {\r\n                if (this.$refs.DetailsForm.validate()) {\r\n                    return true\r\n                }\r\n                return false\r\n            },\r\n            lastBroadcastTime: function () {\r\n                if (this.project.lastBroadcastTimeMs && this.project.lastBroadcastTimeMs > 0) {\r\n                    const date = new Date(this.project.lastBroadcastTimeMs)\r\n                    return date.toLocaleDateString()\r\n                }\r\n                return \"\"\r\n            },\r\n            createdTime: function () {\r\n                if (this.project.createdAt && this.project.createdAt > 0) {\r\n                    const date = new Date(this.project.createdAt)\r\n                    return date.toLocaleDateString()\r\n                }\r\n                return \"\"\r\n            }\r\n        },\r\n        methods: {\r\n            getSubscriptionTypeHint() {\r\n              if (this.projectCopy.subscriptionType == 0) {\r\n                return \"Start from the first article\"\r\n              } else {\r\n                return \"Start from the next new article\"\r\n              }\r\n            },\r\n            createProject() {\r\n                if (!this.validateForm) {\r\n                   return\r\n                }\r\n                this.isOutgoingEmailVerified().then((resp) => {\r\n                    if (resp?.data?.isVerified) {\r\n                        this.isUpdating = true\r\n                        return new Promise((resolve, reject) => {\r\n                            axios({url: API_ENDPOINTS.CREATE_PROJECT, data: this.project, method: 'POST'})\r\n                                .then(resp => {\r\n                                    resolve(resp)\r\n                                    this.isUpdating = false\r\n                                    this.$emit('projectCreated', (resp.data))\r\n                                    this.$refs.DetailsForm.resetValidation()\r\n                                })\r\n                                .catch(err => {\r\n                                    reject(err)\r\n                                    this.isUpdating = false\r\n                                })\r\n                        })\r\n                    } else {\r\n                        this.sendVerificationDialog= true\r\n                        this.sendVerificationEmail(this.projectCopy.outgoingEmail)\r\n                    }\r\n                }).catch(() => {\r\n\r\n                })\r\n            },\r\n            updateProject() {\r\n                if (!this.validateForm) {\r\n                    return\r\n                }\r\n\r\n                this.isOutgoingEmailVerified().then((resp) => {\r\n                    if (resp?.data?.isVerified) {\r\n                        this.isUpdating = true\r\n                        if (!this.project.articleIds || this.project.articleIds.length == 0) {\r\n                          delete this.project[\"articleIds\"]\r\n                        }\r\n                        const data = {email: this.$store.getters.email, project: this.project}\r\n                        return new Promise((resolve, reject) => {\r\n                            axios({url: API_ENDPOINTS.UPDATE_PROJECT, data: data, method: 'PUT' })\r\n                                .then(resp => {\r\n                                    resolve(resp)\r\n                                    this.isUpdating = false\r\n                                    this.$emit('projectUpdated', resp.data)\r\n                                })\r\n                                .catch(err => {\r\n                                    reject(err)\r\n                                    this.isUpdating = false\r\n                                })\r\n                        })\r\n                    } else {\r\n                        this.sendVerificationDialog = true\r\n                        this.sendVerificationEmail(this.projectCopy.outgoingEmail)\r\n                    }\r\n                }).catch(() => {\r\n\r\n                })\r\n            },\r\n            isOutgoingEmailVerified() {\r\n                const data = {requesterEmail: this.$store.getters.email}\r\n                return new Promise((resolve, reject) => {\r\n                    axios({url: API_ENDPOINTS.IS_EMAIL_VERIFIED(this.projectCopy.outgoingEmail), params: data, method: 'GET' })\r\n                        .then(resp => {\r\n                            resolve(resp)\r\n                        })\r\n                        .catch((err) => {\r\n                            reject(err)\r\n                        })\r\n                })\r\n            },\r\n            sendVerificationEmail(email) {\r\n                const data = {requesterEmail: this.$store.getters.email}\r\n                return new Promise((resolve) => {\r\n                    axios({url: API_ENDPOINTS.SEND_VERIFICATION_EMAIL(email), data: data, method: 'POST' })\r\n                        .then(resp => {\r\n                            resolve(resp)\r\n                        })\r\n                        .catch(() => {\r\n                        })\r\n                })\r\n            },\r\n            deleteConfirmed() {\r\n                return new Promise((resolve, reject) => {\r\n                    axios({url: API_ENDPOINTS.DELETE_PROJECT(this.project.email, this.project.projectId), method: 'DELETE' })\r\n                        .then(resp => {\r\n                            resolve(resp)\r\n                            this.$emit('projectDeleted')\r\n                            this.dialog = false\r\n                        })\r\n                        .catch(err => {\r\n                            reject(err)\r\n                            this.dialog = false\r\n                        })\r\n                })\r\n            },\r\n          uploadFile(field) {\r\n            this.showGallery = true\r\n            if (field == 'avatar') {\r\n              this.isEditAvatarUrl = true\r\n            } else if (field == 'background') {\r\n              this.isEditBackgroundUrl = true\r\n            }\r\n          },\r\n          onSelectImage(image) {\r\n            if (this.isEditAvatarUrl) {\r\n              this.projectCopy.avatarUrl = image.src\r\n            } else if (this.isEditBackgroundUrl) {\r\n              this.projectCopy.backgroundImageUrl = image.src\r\n            }\r\n            this.isEditAvatarUrl = false\r\n            this.isEditBackgroundUrl = false\r\n            this.showGallery = false\r\n          }\r\n        },\r\n        beforeUpdate() {\r\n            this.projectCopy = this.project\r\n            if (this.projectCopy && (!this.projectCopy.outgoingEmail || this.projectCopy.outgoingEmail == \"\")) {\r\n                if (this.projectCopy.email) {\r\n                    this.projectCopy.outgoingEmail = this.projectCopy.email\r\n                } else {\r\n                    this.projectCopy.outgoingEmail = this.$store.getters.email\r\n                }\r\n            }\r\n            if (!this.projectCopy.author && !this.projectCopy.createdAt) {\r\n              this.projectCopy.author = this.$store.getters.user.firstName + \" \" + this.$store.getters.user.lastName\r\n            }\r\n            if (this.projectCopy && this.projectCopy.projectState == 3) {\r\n                this.projectState = true\r\n            } else {\r\n                this.projectState = false\r\n            }\r\n        },\r\n        created() {\r\n            this.projectCopy = this.project\r\n            if (this.projectCopy && (!this.projectCopy.outgoingEmail || this.projectCopy.outgoingEmail == \"\")) {\r\n                if (this.projectCopy.email) {\r\n                    this.projectCopy.outgoingEmail = this.projectCopy.email\r\n                } else {\r\n                    this.projectCopy.outgoingEmail = this.$store.getters.email\r\n                }\r\n            }\r\n            if (this.projectCopy && this.projectCopy.projectState == 3) {\r\n                this.projectState = true\r\n            }\r\n            if (!this.projectCopy.interval || this.projectCopy.interval < this.intervals[0].interval) {\r\n                this.projectCopy.interval = this.intervals[0].interval\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n.input-button-wrap {\r\n  display: flex;\r\n}\r\n</style>"]}]}