{"remainingRequest":"D:\\Go\\src\\alphacare\\ac_frontend\\apps\\admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Go\\src\\alphacare\\ac_frontend\\apps\\admin\\src\\views\\Dashboard.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"D:\\Go\\src\\alphacare\\ac_frontend\\apps\\admin\\src\\views\\Dashboard.vue","mtime":1605773362584},{"path":"D:\\Go\\src\\alphacare\\ac_frontend\\apps\\admin\\node_modules\\@vue\\cli-service\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Go\\src\\alphacare\\ac_frontend\\apps\\admin\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"D:\\Go\\src\\alphacare\\ac_frontend\\apps\\admin\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"D:\\Go\\src\\alphacare\\ac_frontend\\apps\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Go\\src\\alphacare\\ac_frontend\\apps\\admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkgewogICAgLnYtY29udGVudCB7CiAgICAgICAgbWFyZ2luOiAwOwogICAgfQp9CgoubmF2LWJhciB7CiAgICBtYXJnaW4tYm90dG9tOiA1MHB4Owp9Cg=="},{"version":3,"sources":["Dashboard.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8KA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"Dashboard.vue","sourceRoot":"src/views","sourcesContent":["<template>\r\n    <div id=\"app\" >\r\n        <v-app id=\"inspire\" >\r\n            <br>\r\n            <div v-if=\"isLoading\">\r\n                <v-row justify=\"center\">\r\n                    <v-progress-circular indeterminate color=\"primary\"></v-progress-circular>\r\n                </v-row>\r\n            </div>\r\n            <div v-else>\r\n                <v-container fluid>\r\n                    <v-layout row wrap class=\"ml-4 mr-4\">\r\n                        <v-flex xs12>\r\n                            <v-row>\r\n                                <v-btn tile dark color=\"info\" @click=\"showProjectDetailsDialog\">\r\n                                  <v-icon left>mdi-plus</v-icon>\r\n                                  Create New\r\n                                </v-btn>\r\n                                <v-spacer></v-spacer>\r\n                                <v-tooltip top>\r\n                                    <template v-slot:activator=\"{ on, attrs }\">\r\n                                    <v-chip  v-bind=\"attrs\" v-on=\"on\" label outlined @click=\"goToPlanPage()\">\r\n                                        Email Usage: {{$store.getters.user.emailUsageInCycle}} / {{getTotalQuota()}}\r\n                                    </v-chip>\r\n                                    </template>\r\n                                    <span>Usage will be reset to 0 every 30 days</span>\r\n                                </v-tooltip>\r\n                            </v-row>\r\n                        </v-flex>\r\n                    </v-layout>\r\n                </v-container>\r\n                <v-container fluid>\r\n                    <v-layout row wrap>\r\n                        <v-flex xs12 sm12 md6 lg4 v-for=\"(project, index) in projects\" v-bind:key=\"project.projectId\">\r\n                          <project-card outlined tile v-bind:project=\"project\" :index=\"index\" @showProjectSettings=\"onShowProjectSettings\" @showProjectArticles=\"onShowProjectArticles(index)\"></project-card>\r\n                        </v-flex>\r\n                    </v-layout>\r\n                </v-container>\r\n                <v-row justify=\"center\">\r\n                    <v-dialog v-model=\"NewProjectDialog\" max-width=\"800px\">\r\n                        <project-details v-if=\"NewProjectDialog\" v-bind:project=\"{email:this.$store.getters.email}\" :resetFromValidation=\"resetFromValidation\" @projectCreated=\"onProjectCreated\"></project-details>\r\n                    </v-dialog>\r\n                </v-row>\r\n                <v-row justify=\"center\">\r\n                    <v-dialog v-model=\"settingDialog\" max-width=\"800px\">\r\n                        <project-details v-if=\"projects[selectedIndex] && settingDialog\" v-bind:project=\"Object.assign({}, projects[selectedIndex])\" :resetFromValidation=\"resetFromValidation\" @projectDeleted=\"onProjectDeleted\" @projectUpdated=\"onProjectUpdated\"></project-details>\r\n                    </v-dialog>\r\n                </v-row>\r\n            </div>\r\n        </v-app>\r\n    </div>\r\n\r\n</template>\r\n\r\n<script>\r\n\r\n    import ProjectCard from \"../components/ProjectCard\";\r\n    import ProjectDetails from \"../components/ProjectDetails\";\r\n    import axios from \"axios\";\r\n    import {default as API_ENDPOINTS} from \"../api\";\r\n    export default {\r\n        components: {ProjectCard, ProjectDetails},\r\n        data() {\r\n            return {\r\n                projects: [],\r\n                showProjectDetails: false,\r\n                NewProjectDialog: false,\r\n                settingDialog: false,\r\n                selectedIndex: -1,\r\n                resetFromValidation: false,\r\n                isLoading: false\r\n            }\r\n        },\r\n        watch: {\r\n            NewProjectDialog(val) {\r\n                if (!val) {\r\n                    this.resetFromValidation = true\r\n                } else {\r\n                    this.resetFromValidation = false\r\n                }\r\n            },\r\n            settingDialog(val) {\r\n                if (!val) {\r\n                    this.resetFromValidation = true\r\n                } else {\r\n                    this.resetFromValidation = false\r\n                }\r\n            }\r\n        },\r\n        methods: {\r\n            goToPlanPage() {\r\n              this.$router.push('/plan')\r\n            },\r\n            getTotalQuota() {\r\n              switch (this.$store.getters.user.subscriptionPlan) {\r\n                case 1: return \"100000\"\r\n                case 2: return \"300000\"\r\n              }\r\n              return \"1000\"\r\n            },\r\n            readUserAndProjects() {\r\n                this.$store.dispatch('readUser', this.$store.getters.email)\r\n                    .then(() => {\r\n                      if (this.$store.getters.user.projectIds && this.$store.getters.user.projectIds.length > 0) {\r\n                          this.readProjects(this.$store.getters.email, this.$store.getters.user.projectIds).then(resp => {\r\n                              const sortedProjects = resp.data.sort(function(x, y) {\r\n                                  return x.createdAt < y.createdAt ? 1 : (x.createdAt > y.createdAt ? -1 : 0)\r\n                              })\r\n                              this.projects = sortedProjects\r\n                              this.isLoading = false\r\n                          })\r\n                        } else {\r\n                        this.isLoading = false\r\n                      }\r\n                    })\r\n            },\r\n            isLogin() {\r\n                if (!this.$store.getters.isLoggedIn || !this.$store.getters.email) {\r\n                    this.$router.push('/')\r\n                    return false\r\n                }\r\n                return true\r\n            },\r\n            readProjects(email, projectIds){\r\n                const data = {email, projectIds}\r\n                return new Promise((resolve, reject) => {\r\n                    axios({url: API_ENDPOINTS.READ_PROJECTS, data: data, method: 'POST' })\r\n                        .then(resp => {\r\n                            resolve(resp)\r\n                        })\r\n                        .catch(err => {\r\n                            reject(err)\r\n                        })\r\n                })\r\n            },\r\n            showProjectDetailsDialog() {\r\n                this.NewProjectDialog = true\r\n            },\r\n            onProjectCreated(project){\r\n                this.projects.push(project)\r\n                this.NewProjectDialog = false\r\n                const sortedProjects = this.projects.sort(function(x, y) {\r\n                    return x.createdAt < y.createdAt ? 1 : (x.createdAt > y.createdAt ? -1 : 0)\r\n                })\r\n                this.projects = sortedProjects\r\n            },\r\n            onProjectUpdated(project) {\r\n                this.settingDialog = false\r\n                this.projects.splice(this.selectedIndex, 1, project);\r\n            },\r\n            onProjectDeleted() {\r\n                this.projects.splice(this.selectedIndex, 1);\r\n                this.settingDialog = false\r\n            },\r\n            onShowProjectSettings(index) {\r\n                this.selectedIndex = index\r\n                this.settingDialog = true\r\n            },\r\n            onShowProjectArticles(index) {\r\n                this.$router.push({name: \"Articles\", params: {projectId : this.projects[index].projectId, project: this.projects[index]}})\r\n            }\r\n        },\r\n        created: function () {\r\n            if (this.isLogin()) {\r\n                this.isLoading = true\r\n                this.readUserAndProjects(this.$store.getters.email)\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n\r\n<style>\r\n\r\n    @media only screen and (max-width: 768px) {\r\n        .v-content {\r\n            margin: 0;\r\n        }\r\n    }\r\n\r\n    .nav-bar {\r\n        margin-bottom: 50px;\r\n    }\r\n</style>\r\n"]}]}