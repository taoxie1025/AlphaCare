{"remainingRequest":"D:\\Go\\src\\alphacare\\ac_frontend\\apps\\admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Go\\src\\alphacare\\ac_frontend\\apps\\admin\\src\\views\\ApiDoc.vue?vue&type=style&index=0&id=12d2af10&scoped=true&lang=css&","dependencies":[{"path":"D:\\Go\\src\\alphacare\\ac_frontend\\apps\\admin\\src\\views\\ApiDoc.vue","mtime":1605858748787},{"path":"D:\\Go\\src\\alphacare\\ac_frontend\\apps\\admin\\node_modules\\@vue\\cli-service\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Go\\src\\alphacare\\ac_frontend\\apps\\admin\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"D:\\Go\\src\\alphacare\\ac_frontend\\apps\\admin\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"D:\\Go\\src\\alphacare\\ac_frontend\\apps\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Go\\src\\alphacare\\ac_frontend\\apps\\admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCiNidXR0b24td3JhcCB7DQogIGRpc3BsYXk6IGlubGluZTsNCn0NCiNwYW5lbCB7DQp9DQo="},{"version":3,"sources":["ApiDoc.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6FA;AACA;AACA;AACA;AACA","file":"ApiDoc.vue","sourceRoot":"src/views","sourcesContent":["<template>\r\n  <v-app>\r\n    <v-container fluid>\r\n      <v-layout row wrap class=\"ma-1\">\r\n        <v-flex xs12 class=\"mb-4\">\r\n          <div id=\"button-wrap\">\r\n            <v-btn tile dark color=\"info\" @click=\"expandCollapse\">{{expandOrCollapse}}</v-btn>\r\n          </div>\r\n        </v-flex>\r\n        <br><br>\r\n        <v-flex xs12>\r\n          <v-expansion-panels focusable multiple id=\"panel\" v-model=\"panel\">\r\n            <v-expansion-panel v-for=\"(api, i) in apis\" :key=\"i\">\r\n              <v-expansion-panel-header>{{api.title}}</v-expansion-panel-header>\r\n              <v-expansion-panel-content>\r\n                <api-card :apiContent=\"api\"></api-card>\r\n              </v-expansion-panel-content>\r\n            </v-expansion-panel>\r\n          </v-expansion-panels>\r\n        </v-flex>\r\n      </v-layout>\r\n    </v-container>\r\n  </v-app>\r\n</template>\r\n\r\n<script>\r\nimport ApiCard from '../components/ApiCard.vue'\r\n\r\nexport default {\r\n  name: \"ApiDoc\",\r\n  components: {ApiCard},\r\n  data() {\r\n    return {\r\n      apis: [\r\n        {\r\n          title: \"Adding a subscriber\",\r\n          method: \"POST\",\r\n          path: \"/api/v1/subscriber\",\r\n          data: [\r\n            {\"field\": \"projectId\", \"desc\": \"The unique identifier of the project.\", \"require\": true},\r\n            {\"field\": \"email\", \"desc\": \"The pending subscriber's email address.\", \"require\": true},\r\n            {\"field\": \"firstName\", \"desc\": \"The pending subscriber's first name.\", \"require\": false},\r\n            {\"field\": \"lastName\", \"desc\": \"The pending subscriber's last name.\", \"require\": false}\r\n          ],\r\n          params: []\r\n        },\r\n        {\r\n          title: \"Deleting a subscriber\",\r\n          method: \"DELETE\",\r\n          path: \"/api/v1/subscriber/:projectId/:email\",\r\n          data: [],\r\n          params: [\r\n            {\"field\": \"projectId\", \"desc\": \"The unique identifier of the project.\", \"require\": true},\r\n            {\"field\": \"email\", \"desc\": \"The subscriber's email address.\", \"require\": true},\r\n          ]\r\n        }\r\n      ],\r\n      panel: [],\r\n      isExpandAll: false\r\n    }\r\n  },\r\n  computed: {\r\n    expandOrCollapse() {\r\n      if (!this.isExpandAll) {\r\n        return \"Expand All\"\r\n      } else {\r\n        return \"Collapse\"\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    expandALl() {\r\n      this.panel = [...Array(this.apis.length).keys()].map((k, i) => i)\r\n    },\r\n    collapseAll() {\r\n      this.panel = []\r\n    },\r\n    expandCollapse() {\r\n      if (!this.isExpandAll) {\r\n        this.expandALl()\r\n        this.isExpandAll = true\r\n      } else {\r\n        this.collapseAll()\r\n        this.isExpandAll = false\r\n      }\r\n    }\r\n  },\r\n  created() {\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n#button-wrap {\r\n  display: inline;\r\n}\r\n#panel {\r\n}\r\n</style>"]}]}