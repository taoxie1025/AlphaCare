{"remainingRequest":"D:\\Go\\src\\alphacare\\ac_frontend\\apps\\admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Go\\src\\alphacare\\ac_frontend\\apps\\admin\\src\\components\\AdminTicketsView.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"D:\\Go\\src\\alphacare\\ac_frontend\\apps\\admin\\src\\components\\AdminTicketsView.vue","mtime":1606025347209},{"path":"D:\\Go\\src\\alphacare\\ac_frontend\\apps\\admin\\node_modules\\@vue\\cli-service\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Go\\src\\alphacare\\ac_frontend\\apps\\admin\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"D:\\Go\\src\\alphacare\\ac_frontend\\apps\\admin\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"D:\\Go\\src\\alphacare\\ac_frontend\\apps\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Go\\src\\alphacare\\ac_frontend\\apps\\admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQoudi10ZXh0LWZpZWxkIC52LWljb24gew0KICBjb2xvcjogZ3JleSAhaW1wb3J0YW50Ow0KfQ0KLnYtZGF0YS10YWJsZSAudi1pY29uIHsNCiAgY29sb3I6IGdyZXkgIWltcG9ydGFudDsNCn0NCg=="},{"version":3,"sources":["AdminTicketsView.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwUA;AACA;AACA;AACA;AACA;AACA","file":"AdminTicketsView.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <v-app id=\"app\">\r\n    <v-container fluid>\r\n      <v-layout row wrap class=\"ma-1\">\r\n        <v-flex xs12>\r\n          <v-text-field\r\n              label=\"Ticket\"\r\n              placeholder=\"Search for ticket\"\r\n              outlined\r\n              prepend-inner-icon=\"mdi-magnify\"\r\n              :append-icon=\"ticketFilter != '' ? 'mdi-close' : ''\"\r\n              v-model=\"ticketFilter\"\r\n              @click:append=\"clear\"\r\n          >\r\n          </v-text-field>\r\n        </v-flex>\r\n        <v-flex xs12>\r\n          <v-data-table\r\n              @click:row=\"rowClick\"\r\n              v-model=\"selectedTickets\"\r\n              :headers=\"headers\"\r\n              :items=\"tickets\"\r\n              item-key=\"ticketId\"\r\n              :loading=\"isLoading\"\r\n              loading-text=\"Loading...\"\r\n              hide-default-footer\r\n              :server-items-length=\"pageSize\"\r\n              disable-sort\r\n              single-select\r\n              class=\"elevation-0\"\r\n              v-infinite-scroll=\"loadMore\"\r\n              infinite-scroll-disabled=\"busy\"\r\n              infinite-scroll-distance=\"10\"\r\n              infinite-scroll-immediate-check=\"false\"\r\n          >\r\n          </v-data-table>\r\n        </v-flex>\r\n      </v-layout>\r\n      <v-layout>\r\n        <v-flex justify=\"center\">\r\n          <v-dialog v-if=\"ticketBriefDialog\" v-model=\"ticketBriefDialog\" width=\"1000px\">\r\n            <v-card tile>\r\n              <v-expansion-panels id=\"panel\" v-model=\"panels\">\r\n                <v-expansion-panel>\r\n                  <ticket-brief\r\n                      :ticket=\"selectedTickets[0]\"\r\n                      @appendComment=\"onAppendComment\"\r\n                      @cancel=\"onCancel\"\r\n                      @ticketUpdated=\"onTicketUpdated\"\r\n                      @ticketDeleted=\"onTicketDeleted\">\r\n                  >\r\n                  </ticket-brief>\r\n                </v-expansion-panel>\r\n              </v-expansion-panels>\r\n            </v-card>\r\n          </v-dialog>\r\n        </v-flex>\r\n      </v-layout>\r\n      <v-snackbar v-model=\"snackbar\" timeout=\"8000\" @click=\"snackbar=false\">\r\n        {{quickMessage}}\r\n        <template v-slot:action=\"{ attrs }\">\r\n          <v-btn\r\n              color=\"pink\"\r\n              text\r\n              v-bind=\"attrs\"\r\n              @click=\"snackbar = false\"\r\n          >\r\n            Close\r\n          </v-btn>\r\n        </template>\r\n      </v-snackbar>\r\n    </v-container>\r\n  </v-app>\r\n</template>\r\n\r\n<script>\r\n\r\nimport axios from \"axios\";\r\nimport {default as API_ENDPOINTS} from \"../api\";\r\nimport TicketBrief from \"@/components/TicketBrief\";\r\n\r\nexport default {\r\n  components: {TicketBrief},\r\n  data() {\r\n    return {\r\n      headers: [\r\n        { text: 'Type', align: 'start', value: 'ticketTypeLabel', class: \"grey lighten-4\"},\r\n        { text: 'User Email', align: 'start', value: 'email', class: \"grey lighten-4\"},\r\n        { text: 'Status', align: 'start', value: 'ticketStatusLabel', class: \"grey lighten-4\"},\r\n        { text: 'Replies', align: 'start', value: 'reply', class: \"grey lighten-4\"},\r\n        { text: 'Date Created', align: 'start', value: 'createdAtLabel', class: \"grey lighten-4\"},\r\n        { text: 'Title', align: 'start', value: 'title', class: \"grey lighten-4\"},\r\n        { text: 'Project ID', align: 'start', value: 'projectId', class: \"grey lighten-4\"},\r\n        { text: 'Project Name', align: 'start', value: 'projectName', class: \"grey lighten-4\"}\r\n      ],\r\n      token: \"\",\r\n      pageSize: 15,\r\n      tickets: [],\r\n      isLoading: false,\r\n      selectedTickets: [],\r\n      ticketFilter: \"\",\r\n      ticketBriefDialog: false,\r\n      panels: 0,\r\n      isUpdating: false,\r\n      quickMessage: \"\",\r\n      snackbar: false\r\n    }\r\n  },\r\n  watch: {\r\n    ticketFilter() {\r\n      if (this.ticketFilter == \"\") {\r\n        this.tickets = []\r\n        this.readTickets()\r\n      } else {\r\n        this.tickets = []\r\n        this.token = \"\"\r\n        this.searchTickets()\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    showQuickMessage(msg) {\r\n      this.quickMessage = msg\r\n      this.snackbar = true\r\n    },\r\n    onAppendComment(comment) {\r\n      return new Promise((resolve, reject) => {\r\n        this.isUpdating = true\r\n        const data = comment\r\n        data.email = this.$store.getters.email\r\n        data.name = this.$store.getters.email\r\n        axios({url: API_ENDPOINTS.CREATE_COMMENT, data: data, method: 'POST'})\r\n            .then(resp => {\r\n              resolve(resp)\r\n              for (let i = 0; i < this.tickets.length; i++) {\r\n                if (this.tickets[i].ticketId == resp.data.ticketId) {\r\n                  this.tickets[i].comments.push(resp.data)\r\n                  this.tickets[i].reply += 1\r\n                  break\r\n                }\r\n              }\r\n              this.isUpdating = false\r\n            })\r\n            .catch(err => {\r\n              reject(err)\r\n              this.isUpdating = false\r\n              this.showQuickMessage(\"Failed to reply the ticket, please try again later.\")\r\n            })\r\n      })\r\n    },\r\n    onTicketUpdated(updatedTicket) {\r\n      for (let i = 0; i < this.tickets.length; i++) {\r\n        if (this.tickets[i].ticketId == updatedTicket.ticketId) {\r\n          this.tickets.splice(i, 1, updatedTicket)\r\n          this.ticketBriefDialog = false\r\n          if (this.tickets[i].ticketStatus != 1) {\r\n            this.tickets.splice(i, 1)\r\n          }\r\n          break\r\n        }\r\n      }\r\n    },\r\n    onTicketDeleted(ticketId) {\r\n      for (let i = 0; i < this.tickets.length; i++) {\r\n        if (this.tickets[i].ticketId == ticketId) {\r\n          this.tickets.splice(i, 1)\r\n          this.ticketBriefDialog = false\r\n          break\r\n        }\r\n      }\r\n    },\r\n    onCancel() {\r\n      this.ticketBriefDialog = false\r\n    },\r\n    rowClick(item) {\r\n      this.selectedTickets = []\r\n      this.selectedTickets.push(item)\r\n      this.ticketBriefDialog = true\r\n    },\r\n    highlightClickedRow(item) {\r\n      const tr = item.target.parentNode;\r\n      tr.classList.add('highlight');\r\n    },\r\n    clear() {\r\n      this.ticketFilter = \"\"\r\n    },\r\n    searchTickets() {\r\n      this.isLoading = true\r\n      this.tickets = []\r\n      this.selectedTickets = []\r\n      return new Promise((resolve, reject) => {\r\n        let data = {ticketFilter: this.ticketFilter}\r\n        axios({url: API_ENDPOINTS.ADMIN_SEARCH_TICKETS, params: data, method: 'GET' })\r\n            .then(resp => {\r\n              resolve(resp)\r\n              for (let i = 0; i < resp.data.length; i++) {\r\n                const ticket = {\r\n                  email: resp.data[i].email,\r\n                  reply: resp.data[i]?.comments?.length,\r\n                  ticketStatusLabel: this.getTicketStatus(resp.data.tickets[i].ticketStatus),\r\n                  ticketStatus: resp.data.tickets[i].ticketStatus,\r\n                  ticketId: resp.data[i].ticketId,\r\n                  createdAtLabel: this.convertEpochToDateString(resp.data[i].createdAt),\r\n                  createdAt: resp.data[i].createdAt,\r\n                  title: resp.data[i].title,\r\n                  projectId: resp.data[i].projectId,\r\n                  projectName: resp.data[i].projectName,\r\n                  ticketTypeLabel: this.getTicketType(resp.data[i].ticketType),\r\n                  ticketType: resp.data[i].ticketType,\r\n                  comments:  resp.data[i].comments,\r\n                  body:  resp.data[i].body\r\n                }\r\n                this.tickets.push(ticket)\r\n              }\r\n              this.isLoading = false\r\n            })\r\n            .catch(err => {\r\n              reject(err)\r\n              this.isLoading = false\r\n            })\r\n      })\r\n    },\r\n    loadMore() {\r\n      if (this.token != \"EOF\" && this.ticketFilter == \"\") {\r\n        this.readTickets()\r\n      }\r\n    },\r\n    validateLogin() {\r\n      if (!this.$store.getters.isLoggedIn || !this.$store.getters.email) {\r\n        console.log(\"not signed in \");\r\n        this.$router.push('/')\r\n        return false\r\n      }\r\n      return true\r\n    },\r\n    readTickets() {\r\n      this.isLoading = true\r\n      return new Promise((resolve, reject) => {\r\n        let data = {\r\n          email: this.$store.getters.email,\r\n          pageSize: this.pageSize,\r\n          token: this.token\r\n        }\r\n        axios({url: API_ENDPOINTS.ADMIN_READ_TICKETS, data: data, method: 'POST' })\r\n            .then(resp => {\r\n              resolve(resp)\r\n              this.token = resp.data.token\r\n              for (let i = 0; i < resp.data.tickets.length; i++) {\r\n                const ticket = {\r\n                  email: resp.data.tickets[i].email,\r\n                  reply: resp.data.tickets[i]?.comments.length,\r\n                  ticketStatusLabel: this.getTicketStatus(resp.data.tickets[i].ticketStatus),\r\n                  ticketStatus: resp.data.tickets[i].ticketStatus,\r\n                  ticketId: resp.data.tickets[i].ticketId,\r\n                  createdAtLabel: this.convertEpochToDateString(resp.data.tickets[i].createdAt),\r\n                  createdAt: resp.data.tickets[i].createdAt,\r\n                  title: resp.data.tickets[i].title,\r\n                  projectId: resp.data.tickets[i].projectId,\r\n                  projectName: resp.data.tickets[i].projectName,\r\n                  ticketTypeLabel: this.getTicketType(resp.data.tickets[i].ticketType),\r\n                  ticketType: resp.data.tickets[i].ticketType,\r\n                  comments: resp.data.tickets[i].comments,\r\n                  body: resp.data.tickets[i].body\r\n                }\r\n                this.tickets.push(ticket)\r\n              }\r\n              this.isLoading = false\r\n            })\r\n            .catch(err => {\r\n              reject(err)\r\n              this.isLoading = false\r\n            })\r\n      })\r\n    },\r\n    getTicketStatus(ticketStatus) {\r\n      switch(ticketStatus) {\r\n        case 0:\r\n          return \"None\"\r\n        case 1:\r\n          return \"Open\"\r\n        case 2:\r\n          return \"Closed\"\r\n        case 3:\r\n          return \"Resolved\"\r\n        case 4:\r\n          return \"Deleted\"\r\n        default:\r\n          return \"None\"\r\n      }\r\n    },\r\n    getTicketType(ticketType) {\r\n      switch(ticketType) {\r\n        case 0:\r\n          return \"General\"\r\n        case 1:\r\n          return \"Bug\"\r\n        case 2:\r\n          return \"Payment\"\r\n        case 3:\r\n          return \"API\"\r\n        case 4:\r\n          return \"Feature\"\r\n        default:\r\n          return \"None\"\r\n      }\r\n    },\r\n    convertEpochToDateString(timestamp) {\r\n      if (timestamp && timestamp > 0) {\r\n        const date = new Date(timestamp)\r\n        return date.toLocaleDateString()\r\n      }\r\n      return \"-\"\r\n    }\r\n  },\r\n  created: function () {\r\n    this.validateLogin()\r\n\r\n    //bypass javascript not enabled issue\r\n    if (!this.tickets || this.tickets.length == 0) {\r\n      this.tickets = []\r\n      this.loadMore()\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n\r\n<style>\r\n.v-text-field .v-icon {\r\n  color: grey !important;\r\n}\r\n.v-data-table .v-icon {\r\n  color: grey !important;\r\n}\r\n</style>\r\n"]}]}